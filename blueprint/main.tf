## --------------------------------------------------------------------------------------------------------------------
## GITHUB CONFIGURATION
## Define which Github repositories the Terraform blueprint user has access to
## 
## This optional configuration will submit a pull request to Github with the Terraform code generated by this blueprint
## after the user has completed the generation steps. This Terraform blueprint is functional without the Github
## integration, and the code may be downloaded after submission for review and deployment, as well as the historical 
## activity portion of the Iac catalog on AutoCloud.
##
## Before this feature can be enabled, you will need to integrate
## AutoCloud with your Github organization by deploying the AutoCloud Github application. For more information on this
## process, see https://docs.autocloud.io/integration-with-source-control-github.
##
## Once the integration is configured, uncomment the code block below, as well as the code block defining the git pull
## request parameters at the bottom of this file.
## --------------------------------------------------------------------------------------------------------------------

## ----- BEGIN GITHUB CONFIGURATION ----- ##
# data "autocloud_github_repos" "repos" {}

# locals {
#   # A list of Github repositories the user is allowed to submit Terraform code to, add specific repositories out of the
#   # repositories you have authorized AutoCloud to access to limit users to your infrastructure as code repositories. If
#   # you set these, uncomment the filter lines in the `dest_repos` definition on lines 20-23 below.
#   # 
#   # allowed_repos = [
#   #   "example",
#   # ]

#   # Destination repos where generated code will be submitted
#   dest_repos = [
#     for repo in data.autocloud_github_repos.repos.data[*].url : repo

#     # Uncomment if you have defined an allow list for your repos on lines 12-14 above.
#     #
#     # if anytrue([
#     #   for allowed_repo in local.allowed_repos: length(regexall(format("/%s", allowed_repo), repo)) > 0
#     # ])
#   ]
# }
## ----- END GITHUB CONFIGURATION ----- ##



## --------------------------------------------------------------------------------------------------------------------
## GLOBAL BLUEPRINT CONFIGURATION
## Define form questions the user will be shown which are either not associated with any Terraform module, or are shared
## between multiple Terraform modules.
## --------------------------------------------------------------------------------------------------------------------

data "autocloud_blueprint_config" "wec2global" {
  source = {}

  omit_variables = []

  # Define the required global application name field
  variable {
    name         = "app_name"
    display_name = "Application Name"
    type         = "shortText"

    validation_rule {
      rule          = "isRequired"
      error_message = "You must provide an application name to provision a resource."
    }
  }
}



## --------------------------------------------------------------------------------------------------------------------
## TAGS MANAGEMENT
## Use organization standard tags management module to apply tags to resources.
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "w_ec2_tags" {
  name   = "wec2tags"
  source = "git@github.com:autoclouddev/infrasturcture-modules-test.git//tags?ref=0.3.0"
}

data "autocloud_blueprint_config" "w_ec2_tags" {
  source = {
    ec2_tags = autocloud_module.w_ec2_tags.blueprint_config
  }

  # Application ID
  variable {
    name         = "ec2_tags.variables.AppID"
    display_name = "Application ID"
    helper_text  = "Identify the application this asset belongs to by its APP ID. Format = APP-####"
    type         = "shortText"

    validation_rule {
      rule          = "isRequired"
      error_message = "You must provide a valid APP ID to provision a resource."
    }

    validation_rule {
      rule          = "regex"
      value         = "^\\d{4}$"
      error_message = "App ID must be a four digit number."
    }
  }

  # Target Environment
  variable {
    name         = "ec2_tags.variables.Environment"
    display_name = "Environment"
    helper_text  = "The environment in which the resource is provisioned and used, such as Dev, Test, QA, Prod."
    type         = "radio"

    options {

      option {
        label   = "Dev"
        value   = "Dev"
        checked = true
      }

      option {
        label   = "Test"
        value   = "Test"
        checked = false
      }

      option {
        label   = "QA"
        value   = "QA"
        checked = false
      }

      option {
        label   = "Prod"
        value   = "Prod"
        checked = false
      }
    }
  }

  # Workload Data Classification
  variable {
    name         = "ec2_tags.variables.DataClassification"
    display_name = "DataClassification"
    helper_text  = "Classification of data - can be made conditionally required based on Compliance. One of the following: Public, Internal, Confidential, Restricted, Privileged (only one)"
    type         = "radio"

    options {

      option {
        label   = "Public"
        value   = "Public"
        checked = false
      }

      option {
        label   = "Internal"
        value   = "Internal"
        checked = true
      }

      option {
        label   = "Confidential"
        value   = "Confidential"
        checked = false
      }

      option {
        label   = "Restricted"
        value   = "Restricted"
        checked = false
      }

      option {
        label   = "Privileged"
        value   = "Privileged"
        checked = false
      }
    }
  }

  # Applicable Compliance Framework
  variable {
    name         = "ec2_tags.variables.Compliance"
    display_name = "Compliance"
    helper_text  = "Compliance Identify assets with compliance requirements (SOX, HIPAA, etc.)"
    type         = "checkbox"

    options {

      option {
        label   = "None"
        value   = "None"
        checked = true
      }

      option {
        label   = "SOX"
        value   = "SOX"
        checked = false
      }

      option {
        label   = "HIPAA"
        value   = "HIPAA"
        checked = false
      }

      option {
        label   = "CCPA"
        value   = "CCPA"
        checked = false
      }
    }
  }

  # Risk Score
  variable {
    name         = "ec2_tags.variables.CRIS"
    display_name = "CRIS"
    helper_text  = "Cyber Risk Impact Score High, Medium, Low (only one)"
    type         = "radio"

    options {

      option {
        label   = "Low"
        value   = "Low"
        checked = true
      }

      option {
        label   = "Medium"
        value   = "Medium"
        checked = false
      }

      option {
        label   = "High"
        value   = "High"
        checked = false
      }
    }
  }

  # Notification List
  variable {
    name         = "ec2_tags.variables.Notify"
    display_name = "Notify"
    helper_text  = "Email to notify for system failure or maintenance. Provide upto 3 email address, click Add to add more"

    validation_rule {
      rule          = "isRequired"
      error_message = "You must provide at least one valid email address."
    }

    validation_rule {
      rule          = "maxLength"
      value         = 3
      error_message = "There can be no more than 3 notification email addresses."
    }

    validation_rule {
      rule          = "regex"
      value         = "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"
      error_message = "Must enter valid email address."
    }
  }

  # System owner
  variable {
    name         = "ec2_tags.variables.Owner"
    display_name = "Owner"
    helper_text  = "List three owners of the system, as defined by AMPS Director, Client Owner and IT Leadeg, click Add to add more"

    validation_rule {
      rule          = "isRequired"
      error_message = "You must provide at least one owner."
    }

    validation_rule {
      rule          = "minLength"
      value         = 3
      error_message = "There must be at least three 3 owners."
    }
  }
}



## --------------------------------------------------------------------------------------------------------------------
## VPC ID REFERENCE
## Find and reference the appropriate network configuration based on destination environment.
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "w_ec2_vpc_id" {
  name = "wec2vpcid"

  # Use module from private module registry in Terraform Cloud/Enterprise
  source  = "app.terraform.io/AutoCloud/utils/aws//modules/vpcid"
  version = "0.4.0"

  # Explicitly add code to pass provider configuration or dependencies external to this blueprint to the module invocation
  header = <<-EOT
  providers = {
    aws = aws.usw2
  }
  EOT

  footer = <<-EOT
  depends_on = [
    module.account_baseline # Force account baseline execution before creating keys
  ]
  EOT
}

data "autocloud_blueprint_config" "w_ec2_vpc_id" {
  source = {
    ec2_vpc_id = autocloud_module.w_ec2_vpc_id.blueprint_config
  }

  omit_variables = [
    "parameter",
  ]
}



## --------------------------------------------------------------------------------------------------------------------
## AMI REFERENCE
## Find and reference the appropriate EC2 AMI based on destination environment.
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "w_ec2_ami_id" {
  name = "wec2amiid"

  # Use module from private module registry in Terraform Cloud/Enterprise
  source  = "app.terraform.io/AutoCloud/utils/aws//modules/golden-ami"
  version = "0.4.0"
}

data "autocloud_blueprint_config" "w_ec2_ami_id" {
  source = {
    ec2_ami_id = autocloud_module.w_ec2_ami_id.blueprint_config
  }

  omit_variables = [
    "parameter",
  ]

  # Hard code OS to desired value for this blueprint
  variable {
    name         = "ec2_ami_id.variables.os"
    display_name = "Operating System"
    helper_text  = "The operating system the deployed instance will be running."
    value        = "windows"
  }
}



## --------------------------------------------------------------------------------------------------------------------
## EXISTING SECURITY GROUP REFERENCES
## Define the existing security groups to apply to the EC2 instance based on the destination environment, such as VPC
## endpoint access, mointoring tooling access, etc.
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "w_ec2_winsg" {
  name = "wec2winsg"

  # Use module from private module registry in Terraform Cloud/Enterprise
  source  = "app.terraform.io/AutoCloud/utils/aws//modules/windows-security-groups"
  version = "0.4.0"
}

data "autocloud_blueprint_config" "w_ec2_winsg" {
  source = {
    ec2_winsg = autocloud_module.w_ec2_winsg.blueprint_config
  }

  omit_variables = [
    "default_rules"
  ]
}



## --------------------------------------------------------------------------------------------------------------------
## NEW SECURITY GROUP
## Create a new security group to apply to this EC2 instance with the rules for inbound and outbound traffic related to
## the application.
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "w_ec2_sg" {
  name = "wec2sg"

  # Use module from git repository
  source = "git@github.com:autoclouddev/infrasturcture-modules-test.git//security-group?ref=0.3.0"
}

data "autocloud_blueprint_config" "w_ec2_sg" {
  source = {
    global = data.autocloud_blueprint_config.wec2global.blueprint_config
    ec2_sg = autocloud_module.w_ec2_sg.blueprint_config
  }

  omit_variables = [
    "cidr_ingress_rules",
    "cidr_egress_rules",
    "security_group_ingress_rules",
    "security_group_egress_rules",
  ]

  # Hard code security group name
  variable {
    name  = "ec2_sg.variables.name"
    value = "{{application_name}}-instance-sg"
    variables = {
      application_name = "global.variables.app_name"
    }
  }

  # Hard code security group description
  variable {
    name  = "ec2_sg.variables.description"
    value = "Main security group for {{application_name}}-instance"
    variables = {
      application_name = "global.variables.app_name"
    }
  }

  # Place the security group in the correct VPC
  variable {
    name  = "ec2_sg.variables.vpc_id"
    value = autocloud_module.w_ec2_vpc_id.outputs["vpc_id"]
  }

  # Apply standard tags
  variable {
    name  = "ec2_sg.variables.tags"
    value = autocloud_module.w_ec2_tags.outputs["tags"]
  }
}



## --------------------------------------------------------------------------------------------------------------------
## KMS KEY
## Create a KMS key to encrypt the EC2 EBS volume with.
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "w_ec2_kms" {
  name   = "wec2kms"
  source = "git@github.com:autoclouddev/infrasturcture-modules-test.git//kms?ref=0.3.0"
}

data "autocloud_blueprint_config" "w_ec2_kms" {
  source = {
    ec2_kms = autocloud_module.w_ec2_kms.blueprint_config
  }

  omit_variables = [
    "deletion_window_in_days",
    "description",
    "key_usage",
    "kms_role",
    "multi_region",
    "name",
  ]

  # Reference the AWS role variable that is defined in the output files and configured in the Terraform Cloud workspace
  variable {
    name  = "ec2_kms.variables.aws_role"
    type  = "raw"
    value = "var.aws_role"
  }

  # Create the KMS Key policy from template generated in output file, passing the account number that is fetched and defined in the main.tf output file
  variable {
    name = "ec2_kms.variables.policy"
    type = "raw"
    # Raw value must be properly string escped. See https://developer.hashicorp.com/terraform/language/expressions/strings#escape-sequences
    value = "templatefile(\"$${path.module}/templates/key_policy.json.tftpl\", { account_num = local.account_num })"
  }

  # Apply standard tags
  variable {
    name  = "ec2_kms.variables.tags"
    value = autocloud_module.w_ec2_tags.outputs["tags"]
  }
}


## --------------------------------------------------------------------------------------------------------------------
## EC2 Instance
## Define the EC2 instance to be created.
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "w_ec2_instance" {
  name   = "wec2instance"
  source = "git@github.com:autoclouddev/infrasturcture-modules-test.git//ec2/pge_windows?ref=0.3.1"
}

data "autocloud_blueprint_config" "w_ec2_instance" {
  source = {
    ec2_instance = autocloud_module.w_ec2_instance.blueprint_config,
    global       = data.autocloud_blueprint_config.wec2global.blueprint_config
  }

  omit_variables = [
    "availability_zone",
    "capacity_reservation_specification",
    "cpu_core_count",
    "cpu_threads_per_core",
    "credit_specification",
    "disable_api_stop",
    "disable_api_termination",
    "ebs_block_device",
    "ebs_optimized",
    "enable_volume_tags",
    "enclave_options_enabled",
    "ephemeral_block_device",
    "get_password_data",
    "hibernation",
    "host_id",
    "host_resource_group_arn",
    "instance_initiated_shutdown_behavior",
    "instance_profile_role",
    "instance_type",
    "launch_template",
    "metadata_options",
    "name",
    "network_interface",
    "placement_group",
    "placement_partition_number",
    "root_block_device",
    "source_dest_check",
    "subnet_id",
    "tenancy",
    "timeouts",
    "user_data_base64",
    "user_data_replace_on_change",
    "volume_tags",
  ]

  # Set the AMI
  variable {
    name  = "ec2_instance.variables.ami"
    value = autocloud_module.w_ec2_ami_id.outputs["ami_id"]
  }

  # Apply the standard tags
  variable {
    name  = "ec2_instance.variables.tags"
    value = autocloud_module.w_ec2_tags.outputs["tags"]
  }

  # Collect user data script, if any
  variable {
    name         = "ec2_instance.variables.user_data"
    display_name = "User Data Script"
    type         = "editor"
  }

  # Set the EC2 instance name
  variable {
    name         = "ec2_instance.variables.name"
    display_name = "Instance Name"
    type         = "shortText"

    value = "{{application_name}}-instance"

    variables = {
      application_name = "global.variables.app_name"
    }
  }

  # Set the applied security group IDs, need to define the local variable `win_sg_list` in the output file and reference it
  variable {
    name = "ec2_instance.variables.vpc_security_group_ids"
    type = "raw"

    value = "local.win_sg_list"
  }
}



## --------------------------------------------------------------------------------------------------------------------
## AUTOCLOUD BLUEPRINT
## Create the AutoCloud Terraform blueprint using the modules and blueprint configurations defined above. 
## --------------------------------------------------------------------------------------------------------------------

data "autocloud_blueprint_config" "wec2final" {
  source = {
    global = data.autocloud_blueprint_config.wec2global.blueprint_config,
    tags   = data.autocloud_blueprint_config.w_ec2_tags.blueprint_config,
    vpcid  = data.autocloud_blueprint_config.w_ec2_vpc_id.blueprint_config,
    winsg  = data.autocloud_blueprint_config.w_ec2_winsg.blueprint_config,
    ami    = data.autocloud_blueprint_config.w_ec2_ami_id.blueprint_config,
    sg     = data.autocloud_blueprint_config.w_ec2_sg.blueprint_config,
    kms    = data.autocloud_blueprint_config.w_ec2_kms.blueprint_config,
    ec2    = data.autocloud_blueprint_config.w_ec2_instance.blueprint_config
  }

  # hide variables from user
  omit_variables = [
    "sg.variables.description",
    "ec2.variables.vpc_security_group_ids"
  ]

  display_order {
    priority = 0
    values = [
      "global.variables.app_name",
      "tags.variables.AppID",
      "tags.variables.Environment",
      "ami.variables.os",
      "ec2.variables.name",
      "sg.variables.name",
      "ec2.variables.user_data",
      "tags.variables.Compliance",
      "tags.variables.CRIS",
      "tags.variables.DataClassification",
      "tags.variables.Owner",
      "tags.variables.Notify",
    ]
  }
}


# create generator blueprint that contains all the elements
resource "autocloud_blueprint" "this" {
  name = "[Example] Simple Windows EC2 Instance"

  # UI Configuration
  author       = "example@example.com"
  description  = "Deploys a simple EC2 instance to AWS in compliance with tooling and standards"
  instructions = file("./templates/md/simplewinec2.md.tpl")
  labels       = ["aws"]

  # form configuration
  config = data.autocloud_blueprint_config.wec2final.config

  ####
  # File Definitions
  #
  # Define the output files that will be included with all the blueprint versions released

  ###
  # main.tf
  # 
  # Define the main.tf that will include all the autogenerated module calls.
  file {
    action = "CREATE"

    # Define the variables that will be used for template interpolation
    variables = {
      name                      = "simplewinec2"
      sg_list                   = autocloud_module.w_ec2_winsg.outputs["win_sg_list"]
      sg_id                     = autocloud_module.w_ec2_sg.outputs["sg_id"]
      generated_kms_module_name = autocloud_module.w_ec2_kms.generated_name,
    }

    # Define the destination file name
    destination = "{{name}}/main.tf"

    # Add the required external terraform to the header of the maint.tf
    header = <<-EOT
      ####
      # An example raw header. Any text that is placed here will be inserted at the top of the main.tf file
      # exactly as it is written. Authors must ensure that the content is valid Terraform code for their environment.

      locals {
        account_num = data.aws_caller_identity.current.account_id
        win_sg_list = concat( {{ sg_list }}, [ {{ sg_id }} ])
        module_tags = []
      }

      data "aws_caller_identity" "current" {}
      EOT

    # Specify which auto generated modules to include in the main.tf
    modules = [
      autocloud_module.w_ec2_tags.name,
      autocloud_module.w_ec2_vpc_id.name,
      autocloud_module.w_ec2_ami_id.name,
      autocloud_module.w_ec2_winsg.name,
      autocloud_module.w_ec2_sg.name,
      autocloud_module.w_ec2_kms.name,
      autocloud_module.w_ec2_instance.name
    ]

    footer = <<-EOT
      ####
      # An example raw footer. Any text that is placed here will be inserted at the bottom of the main.tf file
      # exactly as it is written. Authors must ensure that the content is valid Terraform code for their environment.
      EOT
  }

  ####
  # outputs.tf
  #
  # Create an output file named outputs.tf that contains an output referencing the new EC2 instance to allow cross workspace
  # use cases.

  file {
    action = "CREATE"

    variables = {
      name       = "simplewinec2"
      ip_address = autocloud_module.w_ec2_instance.outputs["private_ip"]
    }

    destination = "{{name}}/outputs.tf"

    # The content string below generates
    #
    # output "ip_address" {
    #   description = "IP address of generated EC2 instance"
    #   value       = join("", module.w_ec2_instnce-kajhfkajsdhf.private_ip[*])
    # }

    # file()
    # content = templatefile("./templates/tf/outputs.tf.tpl", { ip_address = autocloud_module.w_ec2_instance.outputs["private_ip"] })
    content = <<-EOT
      output "ip_address" {
        description = "IP address of generated EC2 instance"
        value       = join("", {{ ip_address }}[*])
      }
      EOT
  }

  ###
  # providers.tf
  #
  # Create an output file named providers.tf that contains the AWS provider configuration needed to execute the code in the workspace.

  file {
    action = "CREATE"

    variables = {
      name = "simplewinec2"
    }

    destination = "{{name}}/providers.tf"

    content = file("./templates/tf/providers.tf.tpl")
  }

  ###
  # variables.tf
  #
  # Define all the variables needed for the Terraform Cloud workspace, matching the workspace variable sets
  file {
    action = "CREATE"

    variables = {
      name = "simplewinec2"
    }

    destination = "{{name}}/variables.tf"

    content = file("./templates/tf/variables.tf.tpl")

  }

  ###
  # versions.tf
  #
  # Define the version constraints for the output code
  file {
    action = "CREATE"

    variables = {
      name = "simplewinec2"
    }

    destination = "{{name}}/versions.tf"

    content = file("./templates/tf/versions.tf.tpl")

  }

  ###
  # key policy
  #
  # Generate the KMS key policy.
  file {
    action = "CREATE"

    variables = {
      name = "simplewinec2"
    }

    destination = "{{name}}/templates/key_policy.json.tftpl"

    content = file("./templates/json/key_policy.json.tftpl.tpl")

  }

  ###
  # Data file
  #
  # Define an example TFVars file to demonstrate the ability to pass tfvars at blueprint creation time (this codebase) and blueprint
  # deployment time (user provided value).
  file {
    action = "CREATE"

    variables = {
      name       = "simplewinec2"
      user_value = data.autocloud_blueprint_config.wec2final.variables["app_name"]
    }

    destination = "{{name}}/data.tfvars"

    content = templatefile("./templates/tf/data.tfvars.tpl", { static_value = "static string provided at Blueprint create time" })
  }


  ## --------------------------------------------------------------------------------------------------------------------
  ## GITHUB PULL REQUEST CONFIGURATION
  ## Define the Github pull request content
  ## 
  ## This optional configuration will submit a pull request to Github with the Terraform code generated by this blueprint
  ## after the user has completed the generation steps. This Terraform blueprint is functional without the Github
  ## integration, and the code may be downloaded after submission for review and deployment, as well as the historical 
  ## activity portion of the Iac catalog on AutoCloud.
  ##
  ## Before this feature can be enabled, you will need to integrate
  ## AutoCloud with your Github organization by deploying the AutoCloud Github application. For more information on this
  ## process, see https://docs.autocloud.io/integration-with-source-control-github.
  ##
  ## Once the integration is configured, uncomment the code block below, as well as the code block defining the repository
  ## access parameters at the top of this file.
  ## --------------------------------------------------------------------------------------------------------------------

  ## ----- BEGIN GITHUB CONFIGURATION ----- ##

  ###
  # Destination repository git configuraiton
  #

  # git_config {
  #   destination_branch = "main"

  #   git_url_options = local.dest_repos
  #   git_url_default = length(local.dest_repos) != 0 ? local.dest_repos[0] : "" # Choose the first in the list by default

  #   pull_request {
  #     title                   = "[AutoCloud] new KMS Encrypted S3 Bucket {{namespace}}-{{environment}}-{{name}}, created by {{authorName}}"
  #     commit_message_template = "[AutoCloud] new KMS Encrypted S3 Bucket {{namespace}}-{{environment}}-{{name}}, created by {{authorName}}"
  #     body                    = file("./files/pull_request.md.tpl")
  #     variables = {
  #       authorName  = "generic.authorName"
  #       namespace   = data.autocloud_blueprint_config.complete.variables["namespace"]
  #       environment = data.autocloud_blueprint_config.complete.variables["environment"]
  #       name        = data.autocloud_blueprint_config.complete.variables["name"]
  #     }
  #   }
  # }

  ## ----- END GITHUB CONFIGURATION ----- ##
}
